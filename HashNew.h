#include <string>
#include <bitset>
uint8_t rand1[] = {194, 63, 53, 136, 162, 216, 53, 86, 131, 97, 235, 172, 93, 16, 41, 243, 189, 223, 170, 30, 181, 248, 157, 10, 194, 210, 151, 194, 55, 220, 83, 152, 143, 4, 173, 51, 125, 250, 141, 242, 177, 95, 124, 223, 125, 228, 182, 224, 98, 70, 241, 148, 185, 241, 6, 73, 91, 124, 33, 80, 1, 249, 48, 157, 1, 202, 232, 233, 105, 21, 20, 10, 210, 12, 79, 198, 179, 87, 167, 202, 68, 140, 117, 102, 37, 247, 90, 71, 86, 229, 186, 25, 167, 91, 28, 156, 181, 14, 13, 214, 50, 253, 165, 190, 35, 247, 227, 218, 0, 22, 35, 17, 254, 24, 39, 151, 38, 226, 173, 95, 137, 68, 88, 144, 73, 132, 78, 115, 154, 207, 226, 165, 12, 253, 195, 85, 167, 0, 146, 243, 231, 99, 209, 234, 132, 124, 232, 62, 184, 35, 14, 178, 52, 193, 171, 64, 130, 170, 92, 97, 146, 62, 162, 117, 110, 51, 226, 168, 242, 74, 148, 88, 29, 21, 94, 115, 106, 164, 212, 216, 173, 32, 75, 121, 15, 19, 164, 166, 204, 235, 92, 22, 95, 176, 4, 29, 245, 86, 7, 28, 179, 97, 246, 100, 158, 134, 182, 73, 149, 197, 105, 90, 114, 159, 146, 34, 188, 94, 188, 132, 199, 232, 71, 255, 233, 219, 208, 31, 23, 167, 196, 108, 41, 119, 71, 114, 245, 77, 155, 248, 198, 144, 170, 176, 77, 35, 99, 239, 244, 144, 98, 242, 145, 35, 27, 162, 228, 132, 132, 188, 242, 22, 244, 245, 179, 90, 77, 220, 44, 65, 52, 27, 133, 247, 141, 186, 165, 241, 18, 67, 85, 253, 158, 123, 167, 246, 89, 127, 204, 96, 137, 7, 174, 61, 113, 214, 6, 79, 129, 195, 98, 162, 181, 164, 8, 2, 205, 42, 87, 20, 153, 199, 238, 99, 207, 8, 27, 200, 160, 104, 32, 94, 169, 31, 121, 54, 13, 232, 16, 188, 25, 122, 54, 0, 105, 57, 59, 82, 158, 65, 163, 96, 143, 238, 2, 195, 210, 210, 233, 107, 228, 173, 139, 114, 238, 27, 3, 12, 118, 111, 233, 210, 194, 81, 185, 61, 158, 4, 46, 225, 168, 60, 186, 27, 83, 152, 106, 84, 200, 254, 141, 116, 66, 77, 100, 245, 253, 207, 219, 138, 51, 225, 124, 150, 163, 36, 236, 15, 74, 39, 247, 98, 156, 245, 211, 191, 193, 142, 67, 20, 68, 140, 147, 101, 236, 94, 171, 237, 117, 120, 219, 69, 240, 234, 133, 155, 188, 45, 25, 53, 60, 50, 223, 90, 119, 37, 212, 100, 50, 109, 180, 174, 146, 122, 24, 155, 158, 152, 168, 227, 156, 26, 147, 241, 89, 13, 1, 12, 59, 102, 18, 104, 153, 188, 47, 13, 200, 206, 83, 182, 168, 98, 189, 129, 238, 231, 172, 150, 169, 2, 2, 94, 238, 239, 221, 10, 184, 108, 26, 73, 49, 182, 42, 0, 175, 161, 58, 68, 171, 86, 48, 17, 43, 245, 187, 5, 57, 139, 47, 116, 82, 255};
std::string HashBit(std::string inp)
{
    if (inp=="")inp=" ";
    uint8_t hash[32] = {28, 238, 163, 73, 224, 250, 97, 228, 10, 21, 100, 247, 151, 86, 145, 176, 175, 157, 82, 141, 115, 188, 143, 171, 109, 193, 104, 221, 218, 223, 191, 63};
    uint8_t in[32]{0};
    for(int i=0;i<inp.length();i++)
    {
        in[i%32] += inp[i];
        //in[i] = inp[i];
    }
    int mx = ((inp.length())<(32)?(inp.length()):(32));
    for (int a = 0; a < mx; a++)
    {
        for (int i = 0; i < 32; i++)
        {
            hash[i] += rand1[((in[a]*890 + i*123 + a*456) % 512)];
        }
    }
    std::bitset<256> out;
    for(int i= 0;i<32;i++)
    {
        out ^= hash[i];
        if(i!=31)
        out <<= 8;
    }
    return out.to_string();
}

std::string HashHex(std::string inp)
{
    if (inp=="")inp=" ";
    uint8_t hash[32] = {28, 238, 163, 73, 224, 250, 97, 228, 10, 21, 100, 247, 151, 86, 145, 176, 175, 157, 82, 141, 115, 188, 143, 171, 109, 193, 104, 221, 218, 223, 191, 63};
    uint8_t in[32]{0};
    for(int i=0;i<inp.length();i++)
    {
        in[i%32] += inp[i];
        //in[i] = inp[i];
    }
    int mx = ((inp.length())<(32)?(inp.length()):(32));
    for (int a = 0; a < mx; a++)
    {
        for (int i = 0; i < 32; i++)
        {
            hash[i] += rand1[((in[a]*890 + i*123 + a*456) % 512)];
        }
    }
    std::string out="";

    for(int i= 0;i<32;i++)
    {
        int a = hash[i]/16;
        int b = hash[i]%16;
        
        if(a<10)
        {
            out+=(char)(a+(int)'0');
        }
        else
        {
            out+=(char)(a+((int)'A')-10);
        }
        if(b<10)
        {
            out+=(char)(b+(int)'0');
        }
        else
        {
            out+=(char)(b+((int)'A')-10);
        }

    }
    return out;
}

uint8_t * HashRaw(std::string inp)
{
    if (inp=="")inp=" ";
    uint8_t * hash =new uint8_t[32] {28, 238, 163, 73, 224, 250, 97, 228, 10, 21, 100, 247, 151, 86, 145, 176, 175, 157, 82, 141, 115, 188, 143, 171, 109, 193, 104, 221, 218, 223, 191, 63};
    uint8_t in[32]{0};
    for(int i=0;i<inp.length();i++)
    {
        in[i%32] += inp[i];
        //in[i] = inp[i];
    }
    int mx = ((inp.length())<(32)?(inp.length()):(32));
    for (int a = 0; a < mx; a++)
    {
        for (int i = 0; i < 32; i++)
        {
            hash[i] += rand1[((in[a]*890 + i*123 + a*456) % 512)];
        }
    }

    return hash;
}